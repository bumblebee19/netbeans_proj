/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chat;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.Blob;

/**
 *
 * @author sapna
 */
class nt implements Runnable
{
    Thread th;
    Socket p;
    public nt(String name,Socket sock)
    {
        th=new Thread(this,name);
   
        System.out.println("New Thread made:\nDetails"+th);
        p=sock;
             th.start();
    }
    public void run()
    {
        String s2="";
        PrintWriter pw=null;
        //int i=0;
        try{
         pw=new PrintWriter(p.getOutputStream(),true);
        }
        catch(IOException e)
        {System.out.println(" "+e);}
         BufferedReader kbin=new BufferedReader(new InputStreamReader(System.in));
        try
        {
            while(!s2.equalsIgnoreCase("exit"))
            {
                //System.out.println(" "+i);
                //i+=2;
            s2=kbin.readLine();
              pw.println(s2);
             // pw.flush();
              Thread.sleep(50);
            } 
            System.out.println("Closing Connection in the sender thread!");
          p.close();
        }
        catch(Exception ex)
        {
            System.out.println("Reply Thread interrupted due to:"+ex);
            System.exit(0);
        }
        
    }
}
public class server extends javax.swing.JFrame {

    /**
     * Creates new form server
     */
    public server() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(server.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        File f=new File("ampm.png");
        
        
     try
     {
         String s1,s2;
         //int i=1;
         ServerSocket s=new ServerSocket(4567);
         System.out.println("Object made");
         Socket sock=s.accept();
         System.out.println("ServerSocket connected to "+sock.getInetAddress());
            PrintWriter pw=new PrintWriter(sock.getOutputStream(),true);
            
           //pw.println("Hi client!");
           //pw.flush();
           FileInputStream fin=new FileInputStream(f);
          byte arr[]={0};
       fin.read(arr);
      
           pw.println("IMG");
           pw.println(arr);
           nt m=new nt("child",sock);
          
           BufferedReader kb=new BufferedReader(new InputStreamReader(sock.getInputStream()));
            
            s1=kb.readLine();
           System.out.println(""+s1);
           while(!s1.equalsIgnoreCase("exit"))
             {
             //    System.out.println(" "+i);
           //      i+=2;
                s1=kb.readLine();
                 System.out.println("Client:"+s1);
                 Thread.sleep(100);
             }
           
            System.out.println("closing connection");
            sock.close();
            pw.close();

     }
     catch(Exception ex)
     {System.out.println(ex);System.exit(0);}
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new server().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
